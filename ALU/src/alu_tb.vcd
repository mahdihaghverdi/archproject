$date
  Wed May 10 14:25:14 2023
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$scope module standard $end
$upscope $end
$scope module std_logic_1164 $end
$upscope $end
$scope module numeric_std $end
$upscope $end
$scope module alu_tb $end
$var reg 4 ! input_a[3:0] $end
$var reg 4 " input_b[3:0] $end
$var reg 8 # output[7:0] $end
$var reg 1 $ carry_borrow_out $end
$var reg 2 % sel[1:0] $end
$scope module uut $end
$var reg 4 & alu_input_a[3:0] $end
$var reg 4 ' alu_input_b[3:0] $end
$var reg 8 ( alu_out[7:0] $end
$var reg 1 ) alu_carry_borrow_out $end
$var reg 2 * alu_select[1:0] $end
$var reg 4 + full_adder_to_i0_t[3:0] $end
$var reg 4 , full_subber_to_i1_t[3:0] $end
$var reg 4 - before_alu_out[3:0] $end
$var reg 8 . multiplier_to_i2[7:0] $end
$var reg 8 / full_adder_to_i0[7:0] $end
$var reg 8 0 full_subber_to_i1[7:0] $end
$var reg 8 1 after_alu_out[7:0] $end
$scope module inner_full_adder $end
$var reg 4 2 input_a[3:0] $end
$var reg 4 3 input_b[3:0] $end
$var reg 4 4 sum[3:0] $end
$var reg 1 5 carry $end
$var reg 1 6 carry_0_1 $end
$var reg 1 7 carry_1_2 $end
$var reg 1 8 carry_2_3 $end
$scope module full_adder_0 $end
$var reg 1 9 a $end
$var reg 1 : b $end
$var reg 1 ; ci $end
$var reg 1 < s $end
$var reg 1 = c $end
$var reg 1 > asb $end
$var reg 1 ? aab $end
$var reg 1 @ asbco $end
$scope module half_adder_0 $end
$var reg 1 A a $end
$var reg 1 B b $end
$var reg 1 C sum $end
$var reg 1 D carry $end
$upscope $end
$scope module half_adder_1 $end
$var reg 1 E a $end
$var reg 1 F b $end
$var reg 1 G sum $end
$var reg 1 H carry $end
$upscope $end
$upscope $end
$scope module full_adder_1 $end
$var reg 1 I a $end
$var reg 1 J b $end
$var reg 1 K ci $end
$var reg 1 L s $end
$var reg 1 M c $end
$var reg 1 N asb $end
$var reg 1 O aab $end
$var reg 1 P asbco $end
$scope module half_adder_0 $end
$var reg 1 Q a $end
$var reg 1 R b $end
$var reg 1 S sum $end
$var reg 1 T carry $end
$upscope $end
$scope module half_adder_1 $end
$var reg 1 U a $end
$var reg 1 V b $end
$var reg 1 W sum $end
$var reg 1 X carry $end
$upscope $end
$upscope $end
$scope module full_adder_2 $end
$var reg 1 Y a $end
$var reg 1 Z b $end
$var reg 1 [ ci $end
$var reg 1 \ s $end
$var reg 1 ] c $end
$var reg 1 ^ asb $end
$var reg 1 _ aab $end
$var reg 1 ` asbco $end
$scope module half_adder_0 $end
$var reg 1 a a $end
$var reg 1 b b $end
$var reg 1 c sum $end
$var reg 1 d carry $end
$upscope $end
$scope module half_adder_1 $end
$var reg 1 e a $end
$var reg 1 f b $end
$var reg 1 g sum $end
$var reg 1 h carry $end
$upscope $end
$upscope $end
$scope module full_adder_3 $end
$var reg 1 i a $end
$var reg 1 j b $end
$var reg 1 k ci $end
$var reg 1 l s $end
$var reg 1 m c $end
$var reg 1 n asb $end
$var reg 1 o aab $end
$var reg 1 p asbco $end
$scope module half_adder_0 $end
$var reg 1 q a $end
$var reg 1 r b $end
$var reg 1 s sum $end
$var reg 1 t carry $end
$upscope $end
$scope module half_adder_1 $end
$var reg 1 u a $end
$var reg 1 v b $end
$var reg 1 w sum $end
$var reg 1 x carry $end
$upscope $end
$upscope $end
$upscope $end
$scope module inner_full_subber $end
$var reg 4 y input_a[3:0] $end
$var reg 4 z input_b[3:0] $end
$var reg 4 { diff[3:0] $end
$var reg 1 | borrow $end
$var reg 1 } borrow_0_1 $end
$var reg 1 !" borrow_1_2 $end
$var reg 1 "" borrow_2_3 $end
$scope module full_subber_0 $end
$var reg 1 #" a $end
$var reg 1 $" b $end
$var reg 1 %" borrow_in $end
$var reg 1 &" diff $end
$var reg 1 '" borrow_out $end
$var reg 1 (" adb $end
$var reg 1 )" anab $end
$var reg 1 *" anabi $end
$scope module half_subber_0 $end
$var reg 1 +" a $end
$var reg 1 ," b $end
$var reg 1 -" diff $end
$var reg 1 ." borrow $end
$upscope $end
$scope module half_subber_1 $end
$var reg 1 /" a $end
$var reg 1 0" b $end
$var reg 1 1" diff $end
$var reg 1 2" borrow $end
$upscope $end
$upscope $end
$scope module full_subber_1 $end
$var reg 1 3" a $end
$var reg 1 4" b $end
$var reg 1 5" borrow_in $end
$var reg 1 6" diff $end
$var reg 1 7" borrow_out $end
$var reg 1 8" adb $end
$var reg 1 9" anab $end
$var reg 1 :" anabi $end
$scope module half_subber_0 $end
$var reg 1 ;" a $end
$var reg 1 <" b $end
$var reg 1 =" diff $end
$var reg 1 >" borrow $end
$upscope $end
$scope module half_subber_1 $end
$var reg 1 ?" a $end
$var reg 1 @" b $end
$var reg 1 A" diff $end
$var reg 1 B" borrow $end
$upscope $end
$upscope $end
$scope module full_subber_2 $end
$var reg 1 C" a $end
$var reg 1 D" b $end
$var reg 1 E" borrow_in $end
$var reg 1 F" diff $end
$var reg 1 G" borrow_out $end
$var reg 1 H" adb $end
$var reg 1 I" anab $end
$var reg 1 J" anabi $end
$scope module half_subber_0 $end
$var reg 1 K" a $end
$var reg 1 L" b $end
$var reg 1 M" diff $end
$var reg 1 N" borrow $end
$upscope $end
$scope module half_subber_1 $end
$var reg 1 O" a $end
$var reg 1 P" b $end
$var reg 1 Q" diff $end
$var reg 1 R" borrow $end
$upscope $end
$upscope $end
$scope module full_subber_3 $end
$var reg 1 S" a $end
$var reg 1 T" b $end
$var reg 1 U" borrow_in $end
$var reg 1 V" diff $end
$var reg 1 W" borrow_out $end
$var reg 1 X" adb $end
$var reg 1 Y" anab $end
$var reg 1 Z" anabi $end
$scope module half_subber_0 $end
$var reg 1 [" a $end
$var reg 1 \" b $end
$var reg 1 ]" diff $end
$var reg 1 ^" borrow $end
$upscope $end
$scope module half_subber_1 $end
$var reg 1 _" a $end
$var reg 1 `" b $end
$var reg 1 a" diff $end
$var reg 1 b" borrow $end
$upscope $end
$upscope $end
$upscope $end
$scope module inner_multiplier $end
$var reg 4 c" input_a[3:0] $end
$var reg 4 d" input_b[3:0] $end
$var reg 8 e" output[7:0] $end
$var reg 1 f" a0b1 $end
$var reg 1 g" a0b2 $end
$var reg 1 h" a0b3 $end
$var reg 4 i" input_a_0[3:0] $end
$var reg 4 j" input_b_0[3:0] $end
$var reg 4 k" input_a_1[3:0] $end
$var reg 4 l" input_b_1[3:0] $end
$var reg 4 m" input_a_2[3:0] $end
$var reg 4 n" input_b_2[3:0] $end
$var reg 1 o" a1b0 $end
$var reg 1 p" a1b1 $end
$var reg 1 q" a1b2 $end
$var reg 1 r" a1b3 $end
$var reg 1 s" a2b0 $end
$var reg 1 t" a2b1 $end
$var reg 1 u" a2b2 $end
$var reg 1 v" a2b3 $end
$var reg 1 w" a3b0 $end
$var reg 1 x" a3b1 $end
$var reg 1 y" a3b2 $end
$var reg 1 z" a3b3 $end
$var reg 4 {" sum0[3:0] $end
$var reg 4 |" sum1[3:0] $end
$var reg 4 }" sum2[3:0] $end
$var reg 1 !# carry_0_1 $end
$var reg 1 "# carry_1_2 $end
$var reg 1 ## carry_2_3 $end
$scope module four_bit_full_adder_0 $end
$var reg 4 $# input_a[3:0] $end
$var reg 4 %# input_b[3:0] $end
$var reg 4 &# sum[3:0] $end
$var reg 1 '# carry $end
$var reg 1 (# carry_0_1 $end
$var reg 1 )# carry_1_2 $end
$var reg 1 *# carry_2_3 $end
$scope module full_adder_0 $end
$var reg 1 +# a $end
$var reg 1 ,# b $end
$var reg 1 -# ci $end
$var reg 1 .# s $end
$var reg 1 /# c $end
$var reg 1 0# asb $end
$var reg 1 1# aab $end
$var reg 1 2# asbco $end
$scope module half_adder_0 $end
$var reg 1 3# a $end
$var reg 1 4# b $end
$var reg 1 5# sum $end
$var reg 1 6# carry $end
$upscope $end
$scope module half_adder_1 $end
$var reg 1 7# a $end
$var reg 1 8# b $end
$var reg 1 9# sum $end
$var reg 1 :# carry $end
$upscope $end
$upscope $end
$scope module full_adder_1 $end
$var reg 1 ;# a $end
$var reg 1 <# b $end
$var reg 1 =# ci $end
$var reg 1 ># s $end
$var reg 1 ?# c $end
$var reg 1 @# asb $end
$var reg 1 A# aab $end
$var reg 1 B# asbco $end
$scope module half_adder_0 $end
$var reg 1 C# a $end
$var reg 1 D# b $end
$var reg 1 E# sum $end
$var reg 1 F# carry $end
$upscope $end
$scope module half_adder_1 $end
$var reg 1 G# a $end
$var reg 1 H# b $end
$var reg 1 I# sum $end
$var reg 1 J# carry $end
$upscope $end
$upscope $end
$scope module full_adder_2 $end
$var reg 1 K# a $end
$var reg 1 L# b $end
$var reg 1 M# ci $end
$var reg 1 N# s $end
$var reg 1 O# c $end
$var reg 1 P# asb $end
$var reg 1 Q# aab $end
$var reg 1 R# asbco $end
$scope module half_adder_0 $end
$var reg 1 S# a $end
$var reg 1 T# b $end
$var reg 1 U# sum $end
$var reg 1 V# carry $end
$upscope $end
$scope module half_adder_1 $end
$var reg 1 W# a $end
$var reg 1 X# b $end
$var reg 1 Y# sum $end
$var reg 1 Z# carry $end
$upscope $end
$upscope $end
$scope module full_adder_3 $end
$var reg 1 [# a $end
$var reg 1 \# b $end
$var reg 1 ]# ci $end
$var reg 1 ^# s $end
$var reg 1 _# c $end
$var reg 1 `# asb $end
$var reg 1 a# aab $end
$var reg 1 b# asbco $end
$scope module half_adder_0 $end
$var reg 1 c# a $end
$var reg 1 d# b $end
$var reg 1 e# sum $end
$var reg 1 f# carry $end
$upscope $end
$scope module half_adder_1 $end
$var reg 1 g# a $end
$var reg 1 h# b $end
$var reg 1 i# sum $end
$var reg 1 j# carry $end
$upscope $end
$upscope $end
$upscope $end
$scope module four_bit_full_adder_1 $end
$var reg 4 k# input_a[3:0] $end
$var reg 4 l# input_b[3:0] $end
$var reg 4 m# sum[3:0] $end
$var reg 1 n# carry $end
$var reg 1 o# carry_0_1 $end
$var reg 1 p# carry_1_2 $end
$var reg 1 q# carry_2_3 $end
$scope module full_adder_0 $end
$var reg 1 r# a $end
$var reg 1 s# b $end
$var reg 1 t# ci $end
$var reg 1 u# s $end
$var reg 1 v# c $end
$var reg 1 w# asb $end
$var reg 1 x# aab $end
$var reg 1 y# asbco $end
$scope module half_adder_0 $end
$var reg 1 z# a $end
$var reg 1 {# b $end
$var reg 1 |# sum $end
$var reg 1 }# carry $end
$upscope $end
$scope module half_adder_1 $end
$var reg 1 !$ a $end
$var reg 1 "$ b $end
$var reg 1 #$ sum $end
$var reg 1 $$ carry $end
$upscope $end
$upscope $end
$scope module full_adder_1 $end
$var reg 1 %$ a $end
$var reg 1 &$ b $end
$var reg 1 '$ ci $end
$var reg 1 ($ s $end
$var reg 1 )$ c $end
$var reg 1 *$ asb $end
$var reg 1 +$ aab $end
$var reg 1 ,$ asbco $end
$scope module half_adder_0 $end
$var reg 1 -$ a $end
$var reg 1 .$ b $end
$var reg 1 /$ sum $end
$var reg 1 0$ carry $end
$upscope $end
$scope module half_adder_1 $end
$var reg 1 1$ a $end
$var reg 1 2$ b $end
$var reg 1 3$ sum $end
$var reg 1 4$ carry $end
$upscope $end
$upscope $end
$scope module full_adder_2 $end
$var reg 1 5$ a $end
$var reg 1 6$ b $end
$var reg 1 7$ ci $end
$var reg 1 8$ s $end
$var reg 1 9$ c $end
$var reg 1 :$ asb $end
$var reg 1 ;$ aab $end
$var reg 1 <$ asbco $end
$scope module half_adder_0 $end
$var reg 1 =$ a $end
$var reg 1 >$ b $end
$var reg 1 ?$ sum $end
$var reg 1 @$ carry $end
$upscope $end
$scope module half_adder_1 $end
$var reg 1 A$ a $end
$var reg 1 B$ b $end
$var reg 1 C$ sum $end
$var reg 1 D$ carry $end
$upscope $end
$upscope $end
$scope module full_adder_3 $end
$var reg 1 E$ a $end
$var reg 1 F$ b $end
$var reg 1 G$ ci $end
$var reg 1 H$ s $end
$var reg 1 I$ c $end
$var reg 1 J$ asb $end
$var reg 1 K$ aab $end
$var reg 1 L$ asbco $end
$scope module half_adder_0 $end
$var reg 1 M$ a $end
$var reg 1 N$ b $end
$var reg 1 O$ sum $end
$var reg 1 P$ carry $end
$upscope $end
$scope module half_adder_1 $end
$var reg 1 Q$ a $end
$var reg 1 R$ b $end
$var reg 1 S$ sum $end
$var reg 1 T$ carry $end
$upscope $end
$upscope $end
$upscope $end
$scope module four_bit_full_adder_2 $end
$var reg 4 U$ input_a[3:0] $end
$var reg 4 V$ input_b[3:0] $end
$var reg 4 W$ sum[3:0] $end
$var reg 1 X$ carry $end
$var reg 1 Y$ carry_0_1 $end
$var reg 1 Z$ carry_1_2 $end
$var reg 1 [$ carry_2_3 $end
$scope module full_adder_0 $end
$var reg 1 \$ a $end
$var reg 1 ]$ b $end
$var reg 1 ^$ ci $end
$var reg 1 _$ s $end
$var reg 1 `$ c $end
$var reg 1 a$ asb $end
$var reg 1 b$ aab $end
$var reg 1 c$ asbco $end
$scope module half_adder_0 $end
$var reg 1 d$ a $end
$var reg 1 e$ b $end
$var reg 1 f$ sum $end
$var reg 1 g$ carry $end
$upscope $end
$scope module half_adder_1 $end
$var reg 1 h$ a $end
$var reg 1 i$ b $end
$var reg 1 j$ sum $end
$var reg 1 k$ carry $end
$upscope $end
$upscope $end
$scope module full_adder_1 $end
$var reg 1 l$ a $end
$var reg 1 m$ b $end
$var reg 1 n$ ci $end
$var reg 1 o$ s $end
$var reg 1 p$ c $end
$var reg 1 q$ asb $end
$var reg 1 r$ aab $end
$var reg 1 s$ asbco $end
$scope module half_adder_0 $end
$var reg 1 t$ a $end
$var reg 1 u$ b $end
$var reg 1 v$ sum $end
$var reg 1 w$ carry $end
$upscope $end
$scope module half_adder_1 $end
$var reg 1 x$ a $end
$var reg 1 y$ b $end
$var reg 1 z$ sum $end
$var reg 1 {$ carry $end
$upscope $end
$upscope $end
$scope module full_adder_2 $end
$var reg 1 |$ a $end
$var reg 1 }$ b $end
$var reg 1 !% ci $end
$var reg 1 "% s $end
$var reg 1 #% c $end
$var reg 1 $% asb $end
$var reg 1 %% aab $end
$var reg 1 &% asbco $end
$scope module half_adder_0 $end
$var reg 1 '% a $end
$var reg 1 (% b $end
$var reg 1 )% sum $end
$var reg 1 *% carry $end
$upscope $end
$scope module half_adder_1 $end
$var reg 1 +% a $end
$var reg 1 ,% b $end
$var reg 1 -% sum $end
$var reg 1 .% carry $end
$upscope $end
$upscope $end
$scope module full_adder_3 $end
$var reg 1 /% a $end
$var reg 1 0% b $end
$var reg 1 1% ci $end
$var reg 1 2% s $end
$var reg 1 3% c $end
$var reg 1 4% asb $end
$var reg 1 5% aab $end
$var reg 1 6% asbco $end
$scope module half_adder_0 $end
$var reg 1 7% a $end
$var reg 1 8% b $end
$var reg 1 9% sum $end
$var reg 1 :% carry $end
$upscope $end
$scope module half_adder_1 $end
$var reg 1 ;% a $end
$var reg 1 <% b $end
$var reg 1 =% sum $end
$var reg 1 >% carry $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module inner_mux $end
$var reg 8 ?% i0[7:0] $end
$var reg 8 @% i1[7:0] $end
$var reg 8 A% i2[7:0] $end
$var reg 8 B% i3[7:0] $end
$var reg 2 C% sel[1:0] $end
$var reg 8 D% output[7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
b0000 !
b0000 "
b00000000 #
0$
b00 %
b0000 &
b0000 '
b00000000 (
0)
b00 *
b0000 +
b0000 ,
bUUUU -
b00000000 .
b00000000 /
b00000000 0
bUUUUUUUU 1
b0000 2
b0000 3
b0000 4
05
06
07
08
09
0:
0;
0<
0=
0>
0?
0@
0A
0B
0C
0D
0E
0F
0G
0H
0I
0J
0K
0L
0M
0N
0O
0P
0Q
0R
0S
0T
0U
0V
0W
0X
0Y
0Z
0[
0\
0]
0^
0_
0`
0a
0b
0c
0d
0e
0f
0g
0h
0i
0j
0k
0l
0m
0n
0o
0p
0q
0r
0s
0t
0u
0v
0w
0x
b0000 y
b0000 z
b0000 {
0|
0}
0!"
0""
0#"
0$"
0%"
0&"
0'"
0("
0)"
0*"
0+"
0,"
0-"
0."
0/"
00"
01"
02"
03"
04"
05"
06"
07"
08"
09"
0:"
0;"
0<"
0="
0>"
0?"
0@"
0A"
0B"
0C"
0D"
0E"
0F"
0G"
0H"
0I"
0J"
0K"
0L"
0M"
0N"
0O"
0P"
0Q"
0R"
0S"
0T"
0U"
0V"
0W"
0X"
0Y"
0Z"
0["
0\"
0]"
0^"
0_"
0`"
0a"
0b"
b0000 c"
b0000 d"
b00000000 e"
0f"
0g"
0h"
b0000 i"
b0000 j"
b0000 k"
b0000 l"
b0000 m"
b0000 n"
0o"
0p"
0q"
0r"
0s"
0t"
0u"
0v"
0w"
0x"
0y"
0z"
b0000 {"
b0000 |"
b0000 }"
0!#
0"#
0##
b0000 $#
b0000 %#
b0000 &#
0'#
0(#
0)#
0*#
0+#
0,#
0-#
0.#
0/#
00#
01#
02#
03#
04#
05#
06#
07#
08#
09#
0:#
0;#
0<#
0=#
0>#
0?#
0@#
0A#
0B#
0C#
0D#
0E#
0F#
0G#
0H#
0I#
0J#
0K#
0L#
0M#
0N#
0O#
0P#
0Q#
0R#
0S#
0T#
0U#
0V#
0W#
0X#
0Y#
0Z#
0[#
0\#
0]#
0^#
0_#
0`#
0a#
0b#
0c#
0d#
0e#
0f#
0g#
0h#
0i#
0j#
b0000 k#
b0000 l#
b0000 m#
0n#
0o#
0p#
0q#
0r#
0s#
0t#
0u#
0v#
0w#
0x#
0y#
0z#
0{#
0|#
0}#
0!$
0"$
0#$
0$$
0%$
0&$
0'$
0($
0)$
0*$
0+$
0,$
0-$
0.$
0/$
00$
01$
02$
03$
04$
05$
06$
07$
08$
09$
0:$
0;$
0<$
0=$
0>$
0?$
0@$
0A$
0B$
0C$
0D$
0E$
0F$
0G$
0H$
0I$
0J$
0K$
0L$
0M$
0N$
0O$
0P$
0Q$
0R$
0S$
0T$
b0000 U$
b0000 V$
b0000 W$
0X$
0Y$
0Z$
0[$
0\$
0]$
0^$
0_$
0`$
0a$
0b$
0c$
0d$
0e$
0f$
0g$
0h$
0i$
0j$
0k$
0l$
0m$
0n$
0o$
0p$
0q$
0r$
0s$
0t$
0u$
0v$
0w$
0x$
0y$
0z$
0{$
0|$
0}$
0!%
0"%
0#%
0$%
0%%
0&%
0'%
0(%
0)%
0*%
0+%
0,%
0-%
0.%
0/%
00%
01%
02%
03%
04%
05%
06%
07%
08%
09%
0:%
0;%
0<%
0=%
0>%
b00000000 ?%
b00000000 @%
b00000000 A%
b11111111 B%
b00 C%
b00000000 D%
#20000000
b0100 !
b0010 "
b00000110 #
b0100 &
b0010 '
b00000110 (
b0110 +
b0010 ,
b00001000 .
b00000110 /
b00000010 0
b0100 2
b0010 3
b0110 4
1J
1L
1N
1R
1S
1U
1W
1Y
1\
1^
1a
1c
1e
1g
b0100 y
b0010 z
b0010 {
1!"
14"
16"
17"
18"
19"
1<"
1="
1>"
1?"
1A"
1C"
1E"
0F"
1H"
1K"
1M"
1O"
1P"
0Q"
b0100 c"
b0010 d"
b00001000 e"
b0010 l"
b0001 m"
1t"
b0010 |"
b0001 }"
b0010 l#
b0010 m#
1&$
1($
1*$
1.$
1/$
11$
13$
b0001 U$
b0001 W$
1\$
1_$
1a$
1d$
1f$
1h$
1j$
b00000110 ?%
b00000010 @%
b00001000 A%
b00000110 D%
#40000000
b00000010 #
b01 %
b00000010 (
b01 *
b01 C%
b00000010 D%
#60000000
b00001000 #
b10 %
b00001000 (
b10 *
b10 C%
b00001000 D%
#80000000
b11111111 #
b11 %
b11111111 (
b11 *
b11 C%
b11111111 D%
#100000000
