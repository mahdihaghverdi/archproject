$date
  Wed May 10 10:52:15 2023
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$scope module standard $end
$upscope $end
$scope module std_logic_1164 $end
$upscope $end
$scope module fourbitmultipliertb $end
$var reg 4 ! a[3:0] $end
$var reg 4 " b[3:0] $end
$var reg 8 # output[7:0] $end
$scope module uut $end
$var reg 4 $ input_a[3:0] $end
$var reg 4 % input_b[3:0] $end
$var reg 8 & output[7:0] $end
$var reg 1 ' a0b1 $end
$var reg 1 ( a0b2 $end
$var reg 1 ) a0b3 $end
$var reg 4 * input_a_0[3:0] $end
$var reg 4 + input_b_0[3:0] $end
$var reg 4 , input_a_1[3:0] $end
$var reg 4 - input_b_1[3:0] $end
$var reg 4 . input_a_2[3:0] $end
$var reg 4 / input_b_2[3:0] $end
$var reg 1 0 a1b0 $end
$var reg 1 1 a1b1 $end
$var reg 1 2 a1b2 $end
$var reg 1 3 a1b3 $end
$var reg 1 4 a2b0 $end
$var reg 1 5 a2b1 $end
$var reg 1 6 a2b2 $end
$var reg 1 7 a2b3 $end
$var reg 1 8 a3b0 $end
$var reg 1 9 a3b1 $end
$var reg 1 : a3b2 $end
$var reg 1 ; a3b3 $end
$var reg 4 < sum0[3:0] $end
$var reg 4 = sum1[3:0] $end
$var reg 4 > sum2[3:0] $end
$var reg 1 ? carry_0_1 $end
$var reg 1 @ carry_1_2 $end
$var reg 1 A carry_2_3 $end
$scope module four_bit_full_adder_0 $end
$var reg 4 B input_a[3:0] $end
$var reg 4 C input_b[3:0] $end
$var reg 4 D sum[3:0] $end
$var reg 1 E carry $end
$var reg 1 F carry_0_1 $end
$var reg 1 G carry_1_2 $end
$var reg 1 H carry_2_3 $end
$scope module full_adder_0 $end
$var reg 1 I a $end
$var reg 1 J b $end
$var reg 1 K ci $end
$var reg 1 L s $end
$var reg 1 M c $end
$var reg 1 N asb $end
$var reg 1 O aab $end
$var reg 1 P asbco $end
$scope module half_adder_0 $end
$var reg 1 Q a $end
$var reg 1 R b $end
$var reg 1 S sum $end
$var reg 1 T carry $end
$upscope $end
$scope module half_adder_1 $end
$var reg 1 U a $end
$var reg 1 V b $end
$var reg 1 W sum $end
$var reg 1 X carry $end
$upscope $end
$upscope $end
$scope module full_adder_1 $end
$var reg 1 Y a $end
$var reg 1 Z b $end
$var reg 1 [ ci $end
$var reg 1 \ s $end
$var reg 1 ] c $end
$var reg 1 ^ asb $end
$var reg 1 _ aab $end
$var reg 1 ` asbco $end
$scope module half_adder_0 $end
$var reg 1 a a $end
$var reg 1 b b $end
$var reg 1 c sum $end
$var reg 1 d carry $end
$upscope $end
$scope module half_adder_1 $end
$var reg 1 e a $end
$var reg 1 f b $end
$var reg 1 g sum $end
$var reg 1 h carry $end
$upscope $end
$upscope $end
$scope module full_adder_2 $end
$var reg 1 i a $end
$var reg 1 j b $end
$var reg 1 k ci $end
$var reg 1 l s $end
$var reg 1 m c $end
$var reg 1 n asb $end
$var reg 1 o aab $end
$var reg 1 p asbco $end
$scope module half_adder_0 $end
$var reg 1 q a $end
$var reg 1 r b $end
$var reg 1 s sum $end
$var reg 1 t carry $end
$upscope $end
$scope module half_adder_1 $end
$var reg 1 u a $end
$var reg 1 v b $end
$var reg 1 w sum $end
$var reg 1 x carry $end
$upscope $end
$upscope $end
$scope module full_adder_3 $end
$var reg 1 y a $end
$var reg 1 z b $end
$var reg 1 { ci $end
$var reg 1 | s $end
$var reg 1 } c $end
$var reg 1 !" asb $end
$var reg 1 "" aab $end
$var reg 1 #" asbco $end
$scope module half_adder_0 $end
$var reg 1 $" a $end
$var reg 1 %" b $end
$var reg 1 &" sum $end
$var reg 1 '" carry $end
$upscope $end
$scope module half_adder_1 $end
$var reg 1 (" a $end
$var reg 1 )" b $end
$var reg 1 *" sum $end
$var reg 1 +" carry $end
$upscope $end
$upscope $end
$upscope $end
$scope module four_bit_full_adder_1 $end
$var reg 4 ," input_a[3:0] $end
$var reg 4 -" input_b[3:0] $end
$var reg 4 ." sum[3:0] $end
$var reg 1 /" carry $end
$var reg 1 0" carry_0_1 $end
$var reg 1 1" carry_1_2 $end
$var reg 1 2" carry_2_3 $end
$scope module full_adder_0 $end
$var reg 1 3" a $end
$var reg 1 4" b $end
$var reg 1 5" ci $end
$var reg 1 6" s $end
$var reg 1 7" c $end
$var reg 1 8" asb $end
$var reg 1 9" aab $end
$var reg 1 :" asbco $end
$scope module half_adder_0 $end
$var reg 1 ;" a $end
$var reg 1 <" b $end
$var reg 1 =" sum $end
$var reg 1 >" carry $end
$upscope $end
$scope module half_adder_1 $end
$var reg 1 ?" a $end
$var reg 1 @" b $end
$var reg 1 A" sum $end
$var reg 1 B" carry $end
$upscope $end
$upscope $end
$scope module full_adder_1 $end
$var reg 1 C" a $end
$var reg 1 D" b $end
$var reg 1 E" ci $end
$var reg 1 F" s $end
$var reg 1 G" c $end
$var reg 1 H" asb $end
$var reg 1 I" aab $end
$var reg 1 J" asbco $end
$scope module half_adder_0 $end
$var reg 1 K" a $end
$var reg 1 L" b $end
$var reg 1 M" sum $end
$var reg 1 N" carry $end
$upscope $end
$scope module half_adder_1 $end
$var reg 1 O" a $end
$var reg 1 P" b $end
$var reg 1 Q" sum $end
$var reg 1 R" carry $end
$upscope $end
$upscope $end
$scope module full_adder_2 $end
$var reg 1 S" a $end
$var reg 1 T" b $end
$var reg 1 U" ci $end
$var reg 1 V" s $end
$var reg 1 W" c $end
$var reg 1 X" asb $end
$var reg 1 Y" aab $end
$var reg 1 Z" asbco $end
$scope module half_adder_0 $end
$var reg 1 [" a $end
$var reg 1 \" b $end
$var reg 1 ]" sum $end
$var reg 1 ^" carry $end
$upscope $end
$scope module half_adder_1 $end
$var reg 1 _" a $end
$var reg 1 `" b $end
$var reg 1 a" sum $end
$var reg 1 b" carry $end
$upscope $end
$upscope $end
$scope module full_adder_3 $end
$var reg 1 c" a $end
$var reg 1 d" b $end
$var reg 1 e" ci $end
$var reg 1 f" s $end
$var reg 1 g" c $end
$var reg 1 h" asb $end
$var reg 1 i" aab $end
$var reg 1 j" asbco $end
$scope module half_adder_0 $end
$var reg 1 k" a $end
$var reg 1 l" b $end
$var reg 1 m" sum $end
$var reg 1 n" carry $end
$upscope $end
$scope module half_adder_1 $end
$var reg 1 o" a $end
$var reg 1 p" b $end
$var reg 1 q" sum $end
$var reg 1 r" carry $end
$upscope $end
$upscope $end
$upscope $end
$scope module four_bit_full_adder_2 $end
$var reg 4 s" input_a[3:0] $end
$var reg 4 t" input_b[3:0] $end
$var reg 4 u" sum[3:0] $end
$var reg 1 v" carry $end
$var reg 1 w" carry_0_1 $end
$var reg 1 x" carry_1_2 $end
$var reg 1 y" carry_2_3 $end
$scope module full_adder_0 $end
$var reg 1 z" a $end
$var reg 1 {" b $end
$var reg 1 |" ci $end
$var reg 1 }" s $end
$var reg 1 !# c $end
$var reg 1 "# asb $end
$var reg 1 ## aab $end
$var reg 1 $# asbco $end
$scope module half_adder_0 $end
$var reg 1 %# a $end
$var reg 1 &# b $end
$var reg 1 '# sum $end
$var reg 1 (# carry $end
$upscope $end
$scope module half_adder_1 $end
$var reg 1 )# a $end
$var reg 1 *# b $end
$var reg 1 +# sum $end
$var reg 1 ,# carry $end
$upscope $end
$upscope $end
$scope module full_adder_1 $end
$var reg 1 -# a $end
$var reg 1 .# b $end
$var reg 1 /# ci $end
$var reg 1 0# s $end
$var reg 1 1# c $end
$var reg 1 2# asb $end
$var reg 1 3# aab $end
$var reg 1 4# asbco $end
$scope module half_adder_0 $end
$var reg 1 5# a $end
$var reg 1 6# b $end
$var reg 1 7# sum $end
$var reg 1 8# carry $end
$upscope $end
$scope module half_adder_1 $end
$var reg 1 9# a $end
$var reg 1 :# b $end
$var reg 1 ;# sum $end
$var reg 1 <# carry $end
$upscope $end
$upscope $end
$scope module full_adder_2 $end
$var reg 1 =# a $end
$var reg 1 ># b $end
$var reg 1 ?# ci $end
$var reg 1 @# s $end
$var reg 1 A# c $end
$var reg 1 B# asb $end
$var reg 1 C# aab $end
$var reg 1 D# asbco $end
$scope module half_adder_0 $end
$var reg 1 E# a $end
$var reg 1 F# b $end
$var reg 1 G# sum $end
$var reg 1 H# carry $end
$upscope $end
$scope module half_adder_1 $end
$var reg 1 I# a $end
$var reg 1 J# b $end
$var reg 1 K# sum $end
$var reg 1 L# carry $end
$upscope $end
$upscope $end
$scope module full_adder_3 $end
$var reg 1 M# a $end
$var reg 1 N# b $end
$var reg 1 O# ci $end
$var reg 1 P# s $end
$var reg 1 Q# c $end
$var reg 1 R# asb $end
$var reg 1 S# aab $end
$var reg 1 T# asbco $end
$scope module half_adder_0 $end
$var reg 1 U# a $end
$var reg 1 V# b $end
$var reg 1 W# sum $end
$var reg 1 X# carry $end
$upscope $end
$scope module half_adder_1 $end
$var reg 1 Y# a $end
$var reg 1 Z# b $end
$var reg 1 [# sum $end
$var reg 1 \# carry $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
b0000 !
b0000 "
b00000000 #
b0000 $
b0000 %
b00000000 &
0'
0(
0)
b0000 *
b0000 +
b0000 ,
b0000 -
b0000 .
b0000 /
00
01
02
03
04
05
06
07
08
09
0:
0;
b0000 <
b0000 =
b0000 >
0?
0@
0A
b0000 B
b0000 C
b0000 D
0E
0F
0G
0H
0I
0J
0K
0L
0M
0N
0O
0P
0Q
0R
0S
0T
0U
0V
0W
0X
0Y
0Z
0[
0\
0]
0^
0_
0`
0a
0b
0c
0d
0e
0f
0g
0h
0i
0j
0k
0l
0m
0n
0o
0p
0q
0r
0s
0t
0u
0v
0w
0x
0y
0z
0{
0|
0}
0!"
0""
0#"
0$"
0%"
0&"
0'"
0("
0)"
0*"
0+"
b0000 ,"
b0000 -"
b0000 ."
0/"
00"
01"
02"
03"
04"
05"
06"
07"
08"
09"
0:"
0;"
0<"
0="
0>"
0?"
0@"
0A"
0B"
0C"
0D"
0E"
0F"
0G"
0H"
0I"
0J"
0K"
0L"
0M"
0N"
0O"
0P"
0Q"
0R"
0S"
0T"
0U"
0V"
0W"
0X"
0Y"
0Z"
0["
0\"
0]"
0^"
0_"
0`"
0a"
0b"
0c"
0d"
0e"
0f"
0g"
0h"
0i"
0j"
0k"
0l"
0m"
0n"
0o"
0p"
0q"
0r"
b0000 s"
b0000 t"
b0000 u"
0v"
0w"
0x"
0y"
0z"
0{"
0|"
0}"
0!#
0"#
0##
0$#
0%#
0&#
0'#
0(#
0)#
0*#
0+#
0,#
0-#
0.#
0/#
00#
01#
02#
03#
04#
05#
06#
07#
08#
09#
0:#
0;#
0<#
0=#
0>#
0?#
0@#
0A#
0B#
0C#
0D#
0E#
0F#
0G#
0H#
0I#
0J#
0K#
0L#
0M#
0N#
0O#
0P#
0Q#
0R#
0S#
0T#
0U#
0V#
0W#
0X#
0Y#
0Z#
0[#
0\#
#20000000
b1011 !
b1101 "
b10001111 #
b1011 $
b1101 %
b10001111 &
1(
1)
b0110 *
b1101 +
b1001 ,
b0100 .
b1101 /
10
12
13
18
1:
1;
b0011 <
b1001 =
b0001 >
1?
1A
b0110 B
b1101 C
b0011 D
1E
1H
1J
1L
1N
1R
1S
1U
1W
1Y
1\
1^
1a
1c
1e
1g
1i
1j
1m
1o
1q
1r
1t
1z
1{
0|
1}
1!"
1#"
1%"
1&"
1("
1)"
0*"
1+"
b1001 ,"
b1001 ."
13"
16"
18"
1;"
1="
1?"
1A"
0S"
0V"
0X"
0["
0]"
0_"
0a"
1c"
1f"
1h"
1k"
1m"
1o"
1q"
b0100 s"
b1101 t"
b0001 u"
1v"
1y"
1{"
1}"
1"#
1&#
1'#
1)#
1+#
0-#
00#
02#
05#
07#
09#
0;#
1=#
1>#
0@#
1A#
0B#
1C#
1E#
1F#
0G#
1H#
0I#
0K#
1N#
1O#
0P#
1Q#
1R#
1T#
1V#
1W#
1Y#
1Z#
0[#
1\#
#40000000
b0101 !
b1001 "
b00101101 #
b0101 $
b1001 %
b00101101 &
0(
b0100 *
b0000 +
b0010 ,
b1001 -
b0101 .
b0000 /
00
02
03
14
17
08
0:
0;
b0100 <
b1011 =
b0101 >
0?
0@
0A
b0100 B
b0000 C
b0100 D
0E
0H
0J
0L
0N
0R
0S
0U
0W
0Y
0\
0^
0a
0c
0e
0g
0j
1l
0m
1n
0o
0r
1s
0t
1u
1w
0z
0{
0|
0}
0!"
0#"
0%"
0&"
0("
0)"
0*"
0+"
b0010 ,"
b1001 -"
b1011 ."
0/"
00"
01"
03"
14"
16"
07"
18"
09"
0;"
1<"
1="
0>"
1?"
1A"
1C"
0E"
1F"
0G"
1H"
0J"
1K"
1M"
1O"
0P"
1Q"
0R"
0S"
0U"
0V"
0X"
0["
0]"
0_"
0`"
0a"
0c"
1d"
1f"
0g"
1h"
0i"
0k"
1l"
1m"
0n"
1o"
1q"
b0101 s"
b0000 t"
b0101 u"
0v"
0y"
1z"
0{"
1}"
1"#
1%#
0&#
1'#
1)#
1+#
0-#
00#
02#
05#
07#
09#
0;#
1=#
0>#
1@#
0A#
1B#
0C#
1E#
0F#
1G#
0H#
1I#
1K#
0M#
0N#
0O#
0P#
0Q#
0R#
0T#
0U#
0V#
0W#
0Y#
0Z#
0[#
0\#
#60000000
b1110 !
b1010 "
b10001100 #
b1110 $
b1010 %
b10001100 &
0)
b0000 *
b1010 +
b0101 ,
b1010 -
b0111 .
b1010 /
11
13
04
15
19
1;
b1010 <
b1111 =
b0001 >
0@
1A
b0000 B
b1010 C
b1010 D
1Z
1\
1^
1b
1c
1e
1g
0i
0l
0n
0q
0s
0u
0w
1z
1|
1!"
1%"
1&"
1("
1*"
b0101 ,"
b1010 -"
b1111 ."
0/"
01"
02"
13"
04"
16"
18"
1;"
0<"
1="
1?"
1A"
0C"
1D"
1F"
0G"
1H"
0I"
0K"
1L"
1M"
0N"
1O"
1Q"
1S"
0U"
1V"
0W"
1X"
0Z"
1["
1]"
1_"
0`"
1a"
0b"
0e"
1f"
0g"
0j"
0p"
1q"
0r"
b0111 s"
b1010 t"
b0001 u"
1v"
1x"
1y"
1z"
1}"
1"#
1%#
1'#
1)#
1+#
1-#
1.#
00#
11#
02#
13#
15#
16#
07#
18#
09#
0;#
1=#
1?#
0@#
1A#
1B#
1D#
1E#
1G#
1I#
1J#
0K#
1L#
0M#
1N#
1O#
0P#
1Q#
1R#
0S#
1T#
0U#
1V#
1W#
0X#
1Y#
1Z#
0[#
1\#
#80000000
